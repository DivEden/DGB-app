name: Build Android APK

# Trigger the workflow on push to main branch or manual trigger
on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:  # Allow manual trigger

jobs:
  build-android:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          git \
          python3-dev \
          python3-pip \
          python3-setuptools \
          python3-wheel \
          openjdk-17-jdk \
          unzip \
          zlib1g-dev \
          libncurses5-dev \
          libncursesw5-dev \
          libtinfo6 \
          cmake \
          libffi-dev \
          libssl-dev \
          autoconf \
          libtool \
          pkg-config \
          libltdl-dev \
          ccache \
          zip \
          wget \
          curl
          
    - name: Set environment variables
      run: |
        echo "JAVA_HOME=/usr/lib/jvm/java-17-openjdk-amd64" >> $GITHUB_ENV
        echo "/usr/lib/jvm/java-17-openjdk-amd64/bin" >> $GITHUB_PATH
        echo "ANDROID_API_LEVEL=31" >> $GITHUB_ENV
        echo "ANDROID_BUILD_TOOLS_VERSION=31.0.0" >> $GITHUB_ENV
        
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install buildozer cython==0.29.36 python-for-android
        
    - name: Setup Android SDK
      uses: android-actions/setup-android@v3
      with:
        api-level: 31
        build-tools: 31.0.0
        ndk: 25.2.9519653
        
    - name: Accept Android licenses
      run: |
        # Accept all licenses automatically
        yes | $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager --licenses
        
        # Install specific build tools we need
        $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager "build-tools;31.0.0"
        
        # Verify installation
        ls -la $ANDROID_SDK_ROOT/build-tools/ || echo "Build tools not found"
        
    - name: Cache buildozer dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.buildozer
          ~/.gradle
          ~/.android
        key: ${{ runner.os }}-buildozer-${{ hashFiles('**/buildozer.spec') }}
        restore-keys: |
          ${{ runner.os }}-buildozer-
          
    - name: Build Android APK
      working-directory: ./museum_search_app
      env:
        ANDROID_SDK_ROOT: ${{ env.ANDROID_SDK_ROOT }}
        ANDROID_HOME: ${{ env.ANDROID_HOME }}
        ANDROID_NDK_ROOT: ${{ env.ANDROID_NDK_ROOT }}
      run: |
        # Make sure we're in the right directory
        pwd
        ls -la
        
        # Show Android SDK setup
        echo "Android SDK Root: $ANDROID_SDK_ROOT"
        echo "Android Home: $ANDROID_HOME" 
        echo "Android NDK: $ANDROID_NDK_ROOT"
        
        # Verify SDK installation
        ls -la $ANDROID_SDK_ROOT/ || echo "SDK directory not found"
        ls -la $ANDROID_SDK_ROOT/build-tools/ || echo "Build tools directory not found"
        
        # Set buildozer to use system Android SDK
        export P4A_ANDROID_SDK_ROOT=$ANDROID_SDK_ROOT
        export P4A_ANDROID_NDK_ROOT=$ANDROID_NDK_ROOT
        
        # Build the APK with verbose output
        buildozer -v android debug
        
    - name: Upload APK artifact
      uses: actions/upload-artifact@v4
      with:
        name: museum-search-app-debug
        path: museum_search_app/bin/*.apk
        retention-days: 30
        
    - name: List build output
      working-directory: ./museum_search_app
      run: |
        echo "Build completed! Generated files:"
        ls -la bin/ || echo "No bin directory found"
        find . -name "*.apk" -type f || echo "No APK files found"